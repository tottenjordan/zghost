#!/usr/bin/env python3
"""
Artifact Server for ADK-generated Media Files

This server provides HTTP access to artifacts (images and videos) generated by ADK agents.
It converts base64-encoded data from the ADK backend into directly accessible files that
can be viewed in browsers and shared via URLs.

Features:
- Automatic base64 decoding with padding correction
- Content-type detection based on file extensions  
- CORS support for frontend integration
- Robust error handling for various encoding issues
- Caching headers for better performance

Usage:
    python artifact_server.py
    
    Or via make:
    make artifact-server

Environment Variables:
    ADK_BACKEND_URL: URL of the ADK backend (default: http://localhost:8000)
    ARTIFACT_SERVER_PORT: Port to run the server on (default: 8001)
"""

import os
import base64
from fastapi import FastAPI, HTTPException, Response
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import requests

app = FastAPI(title="Artifact Server")

# Enable CORS for frontend access
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://localhost:5174"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ADK backend URL
ADK_BACKEND_URL = os.getenv("ADK_BACKEND_URL", "http://localhost:8000")

@app.get("/")
async def root():
    """
    Root endpoint - health check and server info
    
    Returns:
        dict: Server status and available endpoints
    """
    return {
        "message": "Artifact Server is running",
        "endpoints": {
            "artifact": "/artifact/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_key}",
            "list": "/artifact-list/{app_name}/users/{user_id}/sessions/{session_id}"
        },
        "backend": ADK_BACKEND_URL
    }

@app.get("/artifact/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_key}")
async def serve_artifact(
    app_name: str,
    user_id: str,
    session_id: str,
    artifact_key: str
):
    """
    Serve artifact as a direct file response
    
    Fetches an artifact from the ADK backend, decodes the base64 data,
    and serves it with the appropriate content type. This enables direct
    browser viewing and URL sharing of generated images and videos.
    
    Args:
        app_name: Name of the ADK application
        user_id: User identifier
        session_id: Session identifier
        artifact_key: Artifact filename (e.g., "image.png", "video.mp4")
        
    Returns:
        Response: Binary file data with appropriate content-type header
        
    Raises:
        HTTPException: If artifact not found or decoding fails
    """
    try:
        # Fetch artifact from ADK backend
        adk_url = f"{ADK_BACKEND_URL}/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_key}"
        response = requests.get(adk_url)
        
        if response.status_code != 200:
            raise HTTPException(status_code=response.status_code, detail="Artifact not found")
        
        data = response.json()
        
        # Check if we have inline data
        if 'inlineData' in data and 'data' in data['inlineData']:
            base64_data = data['inlineData']['data']
            mime_type = data['inlineData'].get('mimeType', 'application/octet-stream')
            
            # Decode base64 - handle different edge cases
            try:
                # First try URL-safe decode (most common for ADK artifacts)
                try:
                    # Add padding if needed
                    padding_needed = len(base64_data) % 4
                    if padding_needed:
                        base64_data += '=' * (4 - padding_needed)
                    
                    file_bytes = base64.urlsafe_b64decode(base64_data)
                    print(f"[Artifact Server] Successfully decoded {artifact_key} with URL-safe decode")
                except Exception as e1:
                    # Clean whitespace and try standard decode
                    base64_data_clean = base64_data.replace('\n', '').replace('\r', '').replace(' ', '').replace('\t', '')
                    
                    # Add padding if needed
                    padding_needed = len(base64_data_clean) % 4
                    if padding_needed:
                        base64_data_clean += '=' * (4 - padding_needed)
                        print(f"Added {4 - padding_needed} padding characters to {artifact_key}")
                    
                    try:
                        file_bytes = base64.b64decode(base64_data_clean)
                        print(f"[Artifact Server] Successfully decoded {artifact_key} with standard decode")
                    except Exception as e2:
                        # Try URL-safe on cleaned data
                        file_bytes = base64.urlsafe_b64decode(base64_data_clean)
                        print(f"[Artifact Server] Successfully decoded {artifact_key} with URL-safe decode (cleaned)")
                    
            except Exception as e:
                raise HTTPException(status_code=500, detail=f"Failed to decode base64: {str(e)}")
            
            # Log decoding details for debugging
            print(f"[Artifact Server] Decoded {artifact_key}: {len(file_bytes)} bytes")
            
            # Determine content type and filename
            if artifact_key.endswith('.mp4'):
                content_type = 'video/mp4'
            elif artifact_key.endswith('.png'):
                content_type = 'image/png'
                # Verify PNG header
                if len(file_bytes) > 8:
                    png_header = file_bytes[:8]
                    expected_header = b'\x89PNG\r\n\x1a\n'
                    if png_header != expected_header:
                        print(f"[WARNING] Invalid PNG header for {artifact_key}: {png_header.hex()}")
            elif artifact_key.endswith('.jpg') or artifact_key.endswith('.jpeg'):
                content_type = 'image/jpeg'
            elif artifact_key.endswith('.pdf'):
                content_type = 'application/pdf'
            else:
                content_type = mime_type
            
            # Return file response
            return Response(
                content=file_bytes,
                media_type=content_type,
                headers={
                    "Content-Disposition": f'inline; filename="{artifact_key}"',
                    "Cache-Control": "public, max-age=3600",  # Cache for 1 hour
                    "Access-Control-Allow-Origin": "*"  # Allow cross-origin access
                }
            )
        
        # Check if we have file data with URI
        elif 'fileData' in data and 'fileUri' in data['fileData']:
            # For GCS URLs, we could proxy the request or redirect
            # For now, return an error suggesting to use the GCS URL directly
            raise HTTPException(
                status_code=501,
                detail=f"GCS artifacts not yet supported. Use URL: {data['fileData']['fileUri']}"
            )
        
        else:
            raise HTTPException(status_code=404, detail="No artifact data found")
            
    except requests.RequestException as e:
        raise HTTPException(status_code=503, detail=f"Failed to fetch from ADK backend: {str(e)}")
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

@app.get("/artifact-list/{app_name}/users/{user_id}/sessions/{session_id}")
async def list_artifacts(
    app_name: str,
    user_id: str,
    session_id: str
):
    """
    List all artifacts for a session with direct URLs
    
    Fetches the list of artifacts from ADK and returns them with
    direct HTTP URLs for easy access.
    
    Args:
        app_name: Name of the ADK application
        user_id: User identifier
        session_id: Session identifier
        
    Returns:
        list: Array of artifact objects with keys, URLs, and types
        
    Raises:
        HTTPException: If unable to fetch artifact list
    """
    try:
        # Fetch artifact list from ADK backend
        adk_url = f"{ADK_BACKEND_URL}/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts"
        response = requests.get(adk_url)
        
        if response.status_code != 200:
            raise HTTPException(status_code=response.status_code, detail="Failed to list artifacts")
        
        artifacts = response.json()
        
        # Return list with direct URLs
        artifact_urls = []
        for artifact_key in artifacts:
            artifact_urls.append({
                "key": artifact_key,
                "url": f"/artifact/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_key}",
                "type": "video" if artifact_key.endswith('.mp4') else "image"
            })
        
        return artifact_urls
        
    except requests.RequestException as e:
        raise HTTPException(status_code=503, detail=f"Failed to fetch from ADK backend: {str(e)}")

if __name__ == "__main__":
    port = int(os.getenv("ARTIFACT_SERVER_PORT", "8001"))
    print(f"üöÄ Starting Artifact Server on port {port}")
    print(f"üì° Proxying to ADK backend at: {ADK_BACKEND_URL}")
    print(f"üåê Artifact URLs will be available at: http://localhost:{port}/artifact/...")
    uvicorn.run(app, host="0.0.0.0", port=port)